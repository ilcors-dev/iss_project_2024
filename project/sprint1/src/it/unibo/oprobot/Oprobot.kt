/* Generated by AN DISI Unibo */ 
package it.unibo.oprobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.Position

class Oprobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var OWNER = "$name";
				val LOCATIONS = mapOf(
					"home" 			to Position(0,0),
					"wastein" 		to Position(0,4),
					"burn_in"		to Position(3,1),
					"burn_out"		to Position(5,3),
					"ashout"		to Position(6,4)
				); 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engage", cond=doswitch() )
				}	 
				state("engage") { //this:State
					action { //it:State
						CommUtils.outgreen("$name request engage")
						request("engage", "engage($OWNER,350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="inHome",cond=whenReply("engagedone"))
					transition(edgeName="t09",targetState="handleEngageRefused",cond=whenReply("engagerefused"))
				}	 
				state("handleEngageRefused") { //this:State
					action { //it:State
						CommUtils.outblack("engage $name refused, re-trying after some delay..")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engage", cond=doswitch() )
				}	 
				state("inHome") { //this:State
					action { //it:State
						CommUtils.outgreen("$name - waiting in home...")
						forward("robotpositioninfo", "robotpositioninfo(0,0)" ,"wis" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="execGetRp",cond=whenDispatch("getrp"))
				}	 
				state("execGetRp") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("getrp(0)"), Term.createTerm("getrp(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var wasteInPos = LOCATIONS["wastein"];
												println(wasteInPos)
												var WASTEIN_POS_X = wasteInPos?.x;
												var WASTEIN_POS_Y = wasteInPos?.y;
								CommUtils.outgreen("$name - Moving to the WASTEIN PORT")
								request("moverobot", "moverobot($WASTEIN_POS_X,$WASTEIN_POS_Y)" ,"basicrobot" )  
								delay(2000) 
								CommUtils.outgreen("$name - getting a rp")
								delay(2000) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
