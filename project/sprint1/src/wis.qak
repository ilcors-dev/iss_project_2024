System wis24

// MESSAGES
Dispatch startIncinerator   : startIncinerator(0) 		      // turns on the incinerator at startup
Dispatch startBurning       : startBurning(BTIME)			  // tell the incinerator to start burning a RP

// - incinerator
Event burning 				: burning(START_TIME)             // incinerator starts burning
Event finishedBurning 	    : finishedBurning(TIME_ELAPSED)   // end of burning phase

// - monitoring device
Dispatch ashMeasurement     : ashMeasurement(L)

// - basicrobot interaction
Request engage			    : engage(OWNER,STEPTIME) 		  // engaging request
Reply	engagedone		    : engagedone(ARG) 
Reply	engagerefused	    : engagerefused(ARG)

Request moverobot           :  moverobot(TARGETX, TARGETY)  
Reply moverobotdone         :  moverobotok(ARG)                    for moverobot
Reply moverobotfailed       :  moverobotfailed(PLANDONE, PLANTODO) for moverobot

// - oprobot interaction 
Request getrp       		:  getrp(TARGETX, TARGETY)
Reply   getrp_status		:  getrp_status(0)					   for getrp	

Request depositrp           :  depositrp(TARGETX, TARGETY) 
Reply   depositrp_status	:  depositrp_status(0)				   for depositrp

Request extractash          :  extractash(TARGETX, TARGETY) 
Reply   extractash_status	:  extractash_status(0)				   for extractash

Request depositash          :  depositash(TARGETX, TARGETY) 
Reply   depositash_status	:  depositash_status(0)				   for depositash

Request gohome              :  gohome(TARGETX, TARGETY)        
Reply   gohome_status		:  gohome_status(0)                    for gohome

Dispatch robotpositioninfo  :  robotpositioninfo(X, Y)        // the robot says where is at

// CONTEXTS
Context ctxwis24 ip [host="localhost" port=8121]
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]
// Context ctxmonitoringdevice ip [host="127.0.0.1" port=8122]

ExternalQActor basicrobot context ctxbasicrobot

// ACTORS
QActor wis context ctxwis24 {
	import "main.resources.Position"
	[# 
		// constants
		val MAX_ASH_CAPACITY = 4; // max 4 rp in ash storage (capacity)
		
		// variables
		var ASHLEVEL  = 0;
		var RPCONT    = 1;
		var INCSTATUS = 0;    // 0 free, 1 busy
		var INHOME    = 0;    // 0 in home, 1 not in home
	
		val LOCATIONS = mapOf(
			"home" 			to Position(0,0),
			"wastein" 		to Position(0,4),
			"burn_in"		to Position(3,2),
			"burn_out"		to Position(5,3),
			"ashout"		to Position(6,4)
		); 
		val WASTEIN_POS_X = LOCATIONS["wastein"]?.x;
		val WASTEIN_POS_Y = LOCATIONS["wastein"]?.y;

		val HOME_POS_X = LOCATIONS["home"]?.x;
		val HOME_POS_Y = LOCATIONS["home"]?.y;
		
		val BURN_IN_POS_X = LOCATIONS["burn_in"]?.x;
		val BURN_IN_POS_Y = LOCATIONS["burn_in"]?.y;
		
		val BURN_OUT_POS_X = LOCATIONS["burn_out"]?.x;
		val BURN_OUT_POS_Y = LOCATIONS["burn_out"]?.y;
		
		val ASHOUT_POS_X = LOCATIONS["ashout"]?.x;
		val ASHOUT_POS_Y = LOCATIONS["ashout"]?.y;
	#]
	
	State s0 initial {
		println("$name start") color green
	}
	Goto setupSystem
	
	State setupSystem {
		println("$name setupping system..") color green
		forward incinerator -m startIncinerator : startIncinerator(0)
	}
	
	Goto checkStatus
	
	State checkStatus {
		printCurrentMessage
		
		delay 500		
		
		[# 
			val status = "INHOME=${INHOME}_RPCONT=${RPCONT}_ASHCONT=${ASHLEVEL}_INCSTATUS=${INCSTATUS}"
			println(status)
			
			if (RPCONT > 0 && ASHLEVEL < MAX_ASH_CAPACITY && INCSTATUS == 0) {
		#]
				request oprobot -m getrp : getrp($WASTEIN_POS_X, $WASTEIN_POS_Y)
		[# 
				INHOME = 1
			} else if (INHOME != 0) {
		#]
				request oprobot -m moverobot : moverobot($HOME_POS_X, $HOME_POS_Y)
		[# 
			}
		#]
	}

	Transition t0 
		whenEvent burning			-> updateIncStatus
		whenMsg ashMeasurement		-> updateAshLevel
		whenReply getrp_status      -> moveToBurnIn

	State moveToBurnIn {
	    printCurrentMessage
	    onMsg(getrp_status : getrp_status(0)) {
			[# INHOME = 0 #]
            println("$name - Moving to burn in") color green
            request oprobot -m depositrp : depositrp($BURN_IN_POS_X, $BURN_IN_POS_Y)
        }
    }

    Transition t1
		whenReply depositrp_status -> goHome
	
	State goHome {
		printCurrentMessage
		println("$name - Moving to home") color green
		request oprobot -m gohome : gohome($HOME_POS_X, $HOME_POS_Y)
	}

	Transition t2
		whenReply gohome_status -> inHome

	State inHome {
		printCurrentMessage
		onMsg(robotpositioninfo : robotpositioninfo(X, Y)) {
			[#
				var X = payloadArg(0).toInt()
				var Y = payloadArg(1).toInt()
			
			if (X == HOME_POS_X && Y == HOME_POS_Y) {
				INHOME = 1
			#]
				println("$name - arrived in home") color green
			[#
				}
			#]
		}
	}

	Goto checkStatus

	State updateIncStatus { // update incinerator status
		printCurrentMessage

		onMsg(burning : burning(START_TIME)) {
			[# INCSTATUS = 1 #]
  			println("$name - start incinerator, update status") color magenta
  		}
  		
  		onMsg(finishedBurning : finishedBurning(TIME_ELAPSED)) {
			[# INCSTATUS = 0 #]
  			println("$name - finish incinerator, update status") color magenta
  		}
  	}
  	
	Transition t4 
		whenEvent burning			-> updateIncStatus
		whenEvent finishedBurning	-> updateIncStatus
		whenMsg ashMeasurement		-> updateAshLevel
  	
	State updateAshLevel { // update the ash level measurement
		printCurrentMessage
		onMsg(ashMeasurement : ashMeasurement(L)){
			[#
				var level = payloadArg(0).toInt()
				ASHLEVEL += level
			#]
  			println("$name - Update Ash level") color magenta
  		}
  	}
  	
	Transition t0 
		whenEvent burning			-> updateIncStatus
		whenEvent finishedBurning	-> updateIncStatus
		whenMsg ashMeasurement		-> updateAshLevel
}

QActor oprobot context ctxwis24 {
	[#
		var OWNER = "$name";
	#]
	
	State s0 initial{
		println("$name STARTS") color green
	}
	
	Goto engage
	
	State engage {
		println("$name request engage") color green		
		request basicrobot -m engage : engage($OWNER, 350)
	}
	
	Transition t0 
		whenReply engagedone     ->  inHome
		whenReply engagerefused  ->  handleEngageRefused
		
	State handleEngageRefused{
    	println("engage $name refused, re-trying after some delay..")
    	delay 500
    }
    Goto engage
    
    State execGoHome {
		printCurrentMessage 
		onMsg(gohome : gohome(X, Y)) {
			[#
				var X = payloadArg(0).toInt()
				var Y = payloadArg(1).toInt()
			#]
			println("$name - Moving to ($X,$Y)") color green	      
			request basicrobot -m moverobot : moverobot($X, $Y)
			delay 2000 //simulating oprobot taking time to move
		} 
    }
    
    Transition t0
    	whenReply moverobotdone -> inHome
		whenReply moverobotfailed -> execGoHome
    
	State inHome { 
		println("$name - waiting in home...") color green
		forward wis -m robotpositioninfo : robotpositioninfo(0, 0)
	}
	
	Transition t0
		whenRequest getrp -> execGetRp
		whenRequest extractash -> execExtractAsh
	
	State execGetRp { // moving to wastein port
		printCurrentMessage 
		onMsg(getrp : getrp(X, Y)) {
			[#
				var X = payloadArg(0).toInt()
				var Y = payloadArg(1).toInt()
			#]
			println("$name - Moving to ($X,$Y)") color green	      
			request basicrobot -m moverobot : moverobot($X, $Y)
			delay 2000 //simulating oprobot taking time to go to wastein port
		} 
	}
	
	Transition t0
		whenReply moverobotdone -> getRpOk
		whenReply moverobotfailed -> execGetRp

	State getRpOk {
		delay 500
		replyTo getrp with getrp_status : getrp_status(0)
	}
	
	Transition t1
		whenRequest depositrp -> execDepositRp
 
	State execDepositRp {
		printCurrentMessage 
		onMsg(depositrp : depositrp(X, Y)) {
			[#
				var X = payloadArg(0).toInt()
				var Y = payloadArg(1).toInt()
			#]

			println("$name - Depositing RP in ($X, $Y)") color green
			request basicrobot -m moverobot : moverobot($X, $Y)			
	 		delay 2000 //simulating extraction action
	 	}
	}
	 	
	Transition t2
		whenReply moverobotdone -> depositRpOk
		whenReply moverobotfailed -> execDepositRp

	State depositRpOk {
		delay 500
		replyTo depositrp with depositrp_status : depositrp_status(0)
	}
	
	Transition t3
		whenRequest gohome -> execGoHome

	State execExtractAsh {
	    printCurrentMessage
	    onMsg(extractash : extractash(X, Y)) {
            [#
                var X = payloadArg(0).toInt()
                var Y = payloadArg(1).toInt()
            #]
            println("$name - Moving to ($X,$Y)") color green
            request basicrobot -m moverobot : moverobot($X, $Y)
            delay 2000 //simulating oprobot taking time to moverobot
        }
    }

    Transition t0
        whenReply moverobotdone -> extractAshOk
        whenReply moverobotfailed -> execExtractAsh

    State extractAshOk {
        replyTo extractash with extractash_status : extractash_status(0)
    }

    Transition t0
        whenRequest depositash -> execDepositAsh
    
    State execDepositAsh {
        printCurrentMessage
        onMsg(depositash : depositash(X, Y)) {
			[#
				var X = payloadArg(0).toInt()
				var Y = payloadArg(1).toInt()
			#]

            println("$name - Depositing Ash in ($X, $Y)") color green
            request basicrobot -m moverobot : moverobot($X, $Y)
            delay 2000 //simulating extraction action
        }
    }

    Transition t0
        whenReply moverobotdone -> depositAshOk
        whenReply moverobotfailed -> execDepositAsh

    State depositAshOk {
        replyTo depositash with depositash_status : depositash_status(0)
    }

    Transition t0
        whenRequest gohome -> execGoHome
}

QActor incinerator context ctxwis24 {
	[#
		var ACTIVE = false;
	#]
	
	State s0 initial{
		println("$name STARTS") color magenta
	}
	Transition t0
		whenMsg startIncinerator -> startup
		
	State startup {
  		onMsg(startIncinerator : startIncinerator(0)) {
  			[# ACTIVE = true #]
  			
  			println("$name ACTIVATED")
  		}
	}
		
	Transition t0
	  	whenMsg startBurning -> startBurning
	 	
 	State startBurning {
		printCurrentMessage 
		onMsg(startIncinerator : startIncinerator(BTIME)){
			[# var BurnTime = payloadArg(0).toLong() #]
  			println("$name - Start burning phase") color magenta	      
			emit burning : burning(BurnTime)
			
			delayVar BurnTime 
			
			println("$name - Finished burning RP") color magenta
			emit finishedBurning : finishedBurning(BurnTime)
		}
 	}
 	Transition t0
	 	whenMsg startBurning -> startBurning
}

/*
QActor monitoringdevice context ctxmonitoringdevice {
	State s0 initial{ 
 		println("$name STARTS") color green
		delay 500
	}
	Goto measure
	
	// simulate the sonar working
	State measure {
		forward wis -m ashMeasurement : ashMeasurement(10)
		delay 2000
	}

	Goto measure
}
*/

