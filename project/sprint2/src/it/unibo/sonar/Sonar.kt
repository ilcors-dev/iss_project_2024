/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Sonar ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var CURRENT = 0
				var PREVIOUS = 0
				val MIN_DISTANCE = 0
				val MAX_DISTANCE = 100
				
				var SONAR_SENSITIVITY = 1
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name starts")
						delay(1000) 
						subscribeToLocalActor("sonar_device") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleSonarData",cond=whenEvent("sonar_data"))
					transition(edgeName="t05",targetState="updateSensitivity",cond=whenDispatch("sonar_sensitivity"))
				}	 
				state("updateSensitivity") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("sonar_sensitivity(S)"), Term.createTerm("sonar_sensitivity(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SONAR_SENSITIVITY = payloadArg(0).toInt()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handleSonarData",cond=whenEvent("sonar_data"))
					transition(edgeName="t07",targetState="updateSensitivity",cond=whenDispatch("sonar_sensitivity"))
				}	 
				state("handleSonarData") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("distance(D)"), Term.createTerm("distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  
									      		CURRENT = payloadArg(0).toInt()
										
									      		if(CURRENT <= MIN_DISTANCE) CURRENT = MIN_DISTANCE
									      		if(CURRENT >= MAX_DISTANCE) CURRENT = MAX_DISTANCE
								CommUtils.outgreen("current ash level $CURRENT")
								if(  CURRENT >= (PREVIOUS + SONAR_SENSITIVITY) || CURRENT <= (PREVIOUS - SONAR_SENSITIVITY)  
								 ){CommUtils.outgreen("current ash level $CURRENT")
								 PREVIOUS = CURRENT  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="handleSonarData",cond=whenEvent("sonar_data"))
					transition(edgeName="t09",targetState="updateSensitivity",cond=whenDispatch("sonar_sensitivity"))
				}	 
			}
		}
} 
