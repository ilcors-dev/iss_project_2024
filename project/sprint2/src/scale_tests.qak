System scale_tests

Dispatch load_weight   		: load_weight(WEIGHT)
Dispatch unload_weight 		: unload_weight(WEIGHT)
Dispatch update_scale_count : update_scale_count(COUNT) // the scale sends how many rp are currently present
Event scale_data 			: scale_data(WEIGHT) // sent from the physical scale device

Event mqtt_info 			: mqtt_info(MSG)

Context ctxscale_tests ip [host="localhost" port=8123]

QActor scale context ctxscale_tests {
	[# var RPCONT = 0 #]
	
	State s0 initial {
		connectToMqttBroker "tcp://broker.hivemq.com"
		println("$name starts") color yellow
		delay 1000
		subscribeTo scale_device for scale_data
	}
 
	Transition t0
		whenEvent scale_data -> handleScaleData

	State handleScaleData {
		printCurrentMessage
		onMsg(scale_data : scale_data(WEIGHT)){
			println("$name weight=${payloadArg(0)}") color yellow
			
			[# 
				RPCONT = (payloadArg(0).toInt() / 50)
				val RPCONT_LOG = "rp_in_waste_storage_$RPCONT"
			#]
			println("$name the RP number now is $RPCONT") color yellow
			publish "it.unib0.iss.waste-incinerator-service" -m mqtt_info : $RPCONT_LOG
			
			// forward wis -m update_scale_count : update_scale_count($RPCONT)
		}
	}
	
	Transition t0
		whenEvent scale_data -> handleScaleData
}

QActor scale_device context ctxscale_tests {
	[# var CURRENT_WEIGHT = 0 #]
	
	State s0 initial {
		println("$name starts") color yellow
		delay 500
	}
	
	Transition t0
		whenMsg load_weight -> addWeight
		whenMsg unload_weight -> removeWeight
	
	State addWeight {
 		// rp incoming from external source
		onMsg(load_weight : load_weight(WEIGHT)) {
	 		[# CURRENT_WEIGHT += payloadArg(0).toInt() #]
	 		emitlocalstream scale_data : scale_data($CURRENT_WEIGHT)
			println("$name weight added, current = $CURRENT_WEIGHT") 
		}
	}
	
	Transition t0
		whenMsg load_weight -> addWeight
		whenMsg unload_weight -> removeWeight
	
	State removeWeight {
		printCurrentMessage
		onMsg(unload_weight : unload_weight(WEIGHT)) {
			// weight is removed (extracted), likely from the oprobot
	 		[# CURRENT_WEIGHT -= 50 #]
	 		
	 		emitlocalstream scale_data : scale_data($CURRENT_WEIGHT)
 		}
	}
	
	Transition t0
		whenMsg load_weight -> addWeight
		whenMsg unload_weight -> removeWeight
}

/*
QActor mock_rp_loader_external context ctxscale_tests {
	State s0 initial {
		println("$name starts")
		delay 10000
	}
	
	Goto work
	
	State work {
		forward scale_device -m load_weight : load_weight(50)
		println("$name new rp")
		delay 60000
	}
	
	Goto work
}
 */