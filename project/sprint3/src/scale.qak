System scale

Dispatch load_weight   		: load_weight(WEIGHT)
Dispatch unload_weight 		: unload_weight(WEIGHT)
Dispatch update_scale_count : update_scale_count(COUNT) // the scale sends how many rp are currently present
Event scale_data 			: scale_data(WEIGHT) // sent from the physical scale device

Context ctxwis24 ip [host="127.0.0.1" port=8121]
Context ctxscale ip [host="localhost" port=8123]

ExternalQActor wis context ctxwis24

QActor scale context ctxscale {
	[#
		val MAX_RPCONT = 5;
		var RPCONT = 5;
	#]

	State s0 initial {
		println("$name starts") color green
		delay 1000
		subscribeTo scale_device for scale_data
	}
	
	Transition t0
		whenEvent scale_data -> handleScaleData

	State handleScaleData {
		printCurrentMessage
		onMsg(scale_data : scale_data(WEIGHT)){
			println("$name weight=${payloadArg(0)}") color yellow

			[# RPCONT = (payloadArg(0).toInt() / 50) #]
			
			println("$name the RP number now is $RPCONT") color yellow
			
			forward wis -m update_scale_count : update_scale_count($RPCONT)
		}
	}

	Transition t0
		whenEvent scale_data -> handleScaleData
}

QActor scale_device context ctxscale {
	[#
		val MAX_WEIGHT = 250; // aka 5 rp
		var CURRENT_WEIGHT = 250; 
	#]
	
	State s0 initial {
		println("$name starts") color green
		delay 500
	}

	Transition t0
		whenMsg load_weight -> addWeight
		whenMsg unload_weight -> removeWeight
	
	State addWeight {
 		// rp incoming from external source
		onMsg(load_weight : load_weight(WEIGHT)) {
			[# val NEW_WEIGHT = payloadArg(0).toInt() #]
		
			if [# NEW_WEIGHT < MAX_WEIGHT #] {
		 		[# CURRENT_WEIGHT += NEW_WEIGHT #]
		 		emitlocalstream scale_data : scale_data($CURRENT_WEIGHT)
				println("$name weight added, current = $CURRENT_WEIGHT")
			}
		}
	}
	
	Transition t0
		whenMsg load_weight -> addWeight
		whenMsg unload_weight -> removeWeight
	
	State removeWeight {
		printCurrentMessage
		onMsg(unload_weight : unload_weight(WEIGHT)) {
			// weight is removed (extracted), likely from the oprobot
	 		[# CURRENT_WEIGHT -= 50 #]
	 		
	 		emitlocalstream scale_data : scale_data($CURRENT_WEIGHT)
	 		println("$name weight removed, current = $CURRENT_WEIGHT") 
 		}
	}
	
	Transition t0
		whenMsg load_weight -> addWeight
		whenMsg unload_weight -> removeWeight
}

QActor mock_rp_loader_external context ctxscale {
	State s0 initial {
		println("$name starts")
		delay 90000
	}
	
	Goto work
	
	State work {
		forward scale_device -m load_weight : load_weight(50)
		println("$name new rp")
		delay 90000
	}
	
	Goto work
}
