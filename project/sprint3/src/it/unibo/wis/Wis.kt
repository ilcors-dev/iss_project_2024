/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.Position

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
		    /////////////////////////////////////////////////////////////////////////////////////
		    // constants
		    /////////////////////////////////////////////////////////////////////////////////////
		
		    val DLIMIT = 100
		    val ASH_STORAGE_THRESHOLD = 25
		
		    // LED statuses
		    val LED_OFF = "off"
		    val LED_ON = "on"
		    val LED_BLINK = "blink"
		
		    // Possible states that the robot may be in
		    val ROBOT_STATE_HOME = "home"
		    val ROBOT_STATE_MOVING_TO_HOME = "moving_to_home"
		    val ROBOT_STATE_MOVING_TO_WASTEIN = "moving_to_wastein"
		    val ROBOT_STATE_WASTEIN = "wastein"
		    val ROBOT_STATE_MOVING_TO_BURN_IN = "moving_to_burn_in"
		    val ROBOT_STATE_BURN_IN = "burn_in"
		    val ROBOT_STATE_MOVING_TO_BURN_OUT = "moving_to_burn_out"
		    val ROBOT_STATE_BURN_OUT = "burn_out"
		    val ROBOT_STATE_MOVING_TO_ASHOUT = "moving_to_ashout"
		    val ROBOT_STATE_ASHOUT = "ashout"
		
		    /////////////////////////////////////////////////////////////////////////////////////
		    // Possible robot locations in the map
		    /////////////////////////////////////////////////////////////////////////////////////
		    val LOCATIONS =
		      mapOf(
		        "home" to Position(0, 0),
		        "wastein" to Position(0, 4),
		        "burn_in" to Position(3, 2),
		        "burn_out" to Position(5, 3),
		        "ashout" to Position(6, 4)
		      )
		
		    val WASTEIN_POS_X = LOCATIONS["wastein"]?.x
		    val WASTEIN_POS_Y = LOCATIONS["wastein"]?.y
		
		    val HOME_POS_X = LOCATIONS["home"]?.x
		    val HOME_POS_Y = LOCATIONS["home"]?.y
		
		    val BURN_IN_POS_X = LOCATIONS["burn_in"]?.x
		    val BURN_IN_POS_Y = LOCATIONS["burn_in"]?.y
		
		    val BURN_OUT_POS_X = LOCATIONS["burn_out"]?.x
		    val BURN_OUT_POS_Y = LOCATIONS["burn_out"]?.y
		
		    val ASHOUT_POS_X = LOCATIONS["ashout"]?.x
		    val ASHOUT_POS_Y = LOCATIONS["ashout"]?.y
		
		    /////////////////////////////////////////////////////////////////////////////////////
		    // status variables
		    /////////////////////////////////////////////////////////////////////////////////////
		    var ASHLEVEL = 60
		    var RPCONT = 5
		    var INCSTATUS = 0 // 0 free, 1 busy
		    var INHOME = 1 // 1 in home, 0 not in home
		    var ROBOT_STATE = ROBOT_STATE_HOME // robot current state
		
		    /////////////////////////////////////////////////////////////////////////////////////
		    // Helper Functions
		    /////////////////////////////////////////////////////////////////////////////////////
		 
		    /**
		     * Converts the current ash level into a percentage signaling how much the storage is full
		     */
		    fun calculateAshPercentage(): Int {
		      val ashFullness = DLIMIT - ASHLEVEL
		      return (ashFullness * 100 / DLIMIT).coerceIn(0, 100) // ensure within 0-100
		    }
		    
		    /**
		     * Returns the status report string to update the GUI (or generally who's subscribing to the wis actor)
		     */
		    fun getStatusString(): String {
		    	return "'name=$name;rp=$RPCONT;incinerator=$INCSTATUS;robot=$ROBOT_STATE;ash=${calculateAshPercentage()}%'"
		    }
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						connectToMqttBroker( "tcp://localhost" )
						delay(500) 
						CommUtils.outgreen("$name start")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="setupSystem", cond=doswitch() )
				}	 
				state("setupSystem") { //this:State
					action { //it:State
						CommUtils.outgreen("$name setupping system..")
						forward("startIncinerator", "startIncinerator(0)" ,"incinerator" ) 
						 val ASH_LEVEL_LOG = (ASHLEVEL + DLIMIT - ASH_STORAGE_THRESHOLD)  
						CommUtils.outgreen("current ash level=$ASH_LEVEL_LOG")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="check", cond=doswitch() )
				}	 
				state("check") { //this:State
					action { //it:State
						
						    	val hasRp = RPCONT > 0;
						    	val ashStorageNotFull = (ASHLEVEL + DLIMIT - ASH_STORAGE_THRESHOLD) > DLIMIT;
						    	val isIncineratorOff = INCSTATUS == 0;
						    	val inHome = INHOME == 1;
						    	
						    	CommUtils.outgreen("hasRp: $hasRp");
						    	CommUtils.outgreen("ashStorageNotFull: $ashStorageNotFull");
						    	CommUtils.outgreen("isIncineratorOff: $isIncineratorOff");
						    	CommUtils.outgreen("inHome: $inHome");
						    	val condition = hasRp && ashStorageNotFull && isIncineratorOff && inHome;
						if(  hasRp && ashStorageNotFull && isIncineratorOff && inHome  
						 ){CommUtils.outblack("condition met: has rp available, ash storage is not full, incinerator is off")
						request("getrp", "getrp($WASTEIN_POS_X,$WASTEIN_POS_Y)" ,"oprobot" )  
						
						      	INHOME = 0
						      	ROBOT_STATE = ROBOT_STATE_MOVING_TO_WASTEIN
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="printStatus", cond=doswitch() )
				}	 
				state("printStatus") { //this:State
					action { //it:State
						
						      val RP_STATUS = "RPCONT_${RPCONT}"
						      val ASHLEVEL_STATUS = "ASHLEVEL_${ASHLEVEL}"
						      val STATUS = getStatusString()
						//val m = MsgUtil.buildEvent(name, "mqtt_info", "$RP_STATUS" ) 
						publish(MsgUtil.buildEvent(name,"mqtt_info","$RP_STATUS").toString(), "it.unib0.iss.waste-incinerator-service" )   
						//val m = MsgUtil.buildEvent(name, "mqtt_info", "$ASHLEVEL_STATUS" ) 
						publish(MsgUtil.buildEvent(name,"mqtt_info","$ASHLEVEL_STATUS").toString(), "it.unib0.iss.waste-incinerator-service" )   
						//val m = MsgUtil.buildEvent(name, "mqtt_info", "$STATUS" ) 
						publish(MsgUtil.buildEvent(name,"mqtt_info","$STATUS").toString(), "it.unib0.iss.waste-incinerator-service" )   
						updateResourceRep( getStatusString()  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="updateIncStatus",cond=whenDispatch("burning"))
					transition(edgeName="t01",targetState="updateIncStatus",cond=whenDispatch("finishedBurning"))
					transition(edgeName="t02",targetState="moveToBurnIn",cond=whenReply("getrp_status"))
					transition(edgeName="t03",targetState="moveToAshOut",cond=whenReply("extractash_status"))
					transition(edgeName="t04",targetState="handleScaleRPStatus",cond=whenDispatch("update_scale_count"))
					transition(edgeName="t05",targetState="handleAshMeasurement",cond=whenDispatch("ash_measurement"))
				}	 
				state("moveToBurnIn") { //this:State
					action { //it:State
						 ROBOT_STATE = ROBOT_STATE_WASTEIN  
						updateResourceRep( getStatusString()  
						)
						if( checkMsgContent( Term.createTerm("getrp_status(0)"), Term.createTerm("getrp_status(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 INHOME = 0  
								 RPCONT -= 1  
								CommUtils.outgreen("$name - Moving to burn in")
								delay(200) 
								 ROBOT_STATE = ROBOT_STATE_MOVING_TO_BURN_IN  
								updateResourceRep( getStatusString()  
								)
								request("depositrp", "depositrp($BURN_IN_POS_X,$BURN_IN_POS_Y)" ,"oprobot" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t16",targetState="startBurningPhase",cond=whenReply("depositrp_status"))
				}	 
				state("startBurningPhase") { //this:State
					action { //it:State
						CommUtils.outgreen("$name - Start burning phase")
						 ROBOT_STATE = ROBOT_STATE_BURN_IN  
						updateResourceRep( getStatusString()  
						)
						forward("startBurning", "startBurning(10000)" ,"incinerator" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="updateIncStatus",cond=whenDispatch("burning"))
				}	 
				state("moveToAshOut") { //this:State
					action { //it:State
						 ROBOT_STATE = ROBOT_STATE_BURN_OUT  
						if( checkMsgContent( Term.createTerm("extractash_status(0)"), Term.createTerm("extractash_status(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 INHOME = 0  
								CommUtils.outgreen("$name - Moving to ash out")
								delay(500) 
								 ROBOT_STATE = ROBOT_STATE_MOVING_TO_ASHOUT  
								updateResourceRep( getStatusString()  
								)
								request("depositash", "depositash($ASHOUT_POS_X,$ASHOUT_POS_Y)" ,"oprobot" )  
								updateResourceRep( getStatusString()  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t58",targetState="goHome",cond=whenReply("depositash_status"))
				}	 
				state("goHome") { //this:State
					action { //it:State
						CommUtils.outgreen("$name - Moving to home")
						 ROBOT_STATE = ROBOT_STATE_MOVING_TO_HOME  
						updateResourceRep( getStatusString()  
						)
						request("gohome", "gohome($HOME_POS_X,$HOME_POS_Y)" ,"oprobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t29",targetState="inHome",cond=whenReply("gohome_status"))
				}	 
				state("inHome") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("gohome_status(0)"), Term.createTerm("gohome_status(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 INHOME = 1  
								CommUtils.outgreen("$name - arrived in home")
								 ROBOT_STATE = ROBOT_STATE_HOME  
								updateResourceRep( getStatusString()  
								)
								 val ASH_LEVEL_LOG = (ASHLEVEL + DLIMIT - ASH_STORAGE_THRESHOLD)  
								CommUtils.outgreen("current ash level=$ASH_LEVEL_LOG")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="check", cond=doswitch() )
				}	 
				state("updateIncStatus") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("burning(0)"), Term.createTerm("burning(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 INCSTATUS = 1  
								CommUtils.outmagenta("$name - start incinerator, update status")
								//val m = MsgUtil.buildEvent(name, "mqtt_info", "incinerator_status_BURNING" ) 
								publish(MsgUtil.buildEvent(name,"mqtt_info","incinerator_status_BURNING").toString(), "it.unib0.iss.waste-incinerator-service" )   
								forward("update_led_mode", "update_led_mode($LED_ON)" ,"led" ) 
						}
						if( checkMsgContent( Term.createTerm("finishedBurning(0)"), Term.createTerm("finishedBurning(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 INCSTATUS = 0  
								CommUtils.outmagenta("$name - finish incinerator, update status")
								//val m = MsgUtil.buildEvent(name, "mqtt_info", "incinerator_status_FINISHED_BURNING" ) 
								publish(MsgUtil.buildEvent(name,"mqtt_info","incinerator_status_FINISHED_BURNING").toString(), "it.unib0.iss.waste-incinerator-service" )   
								 ROBOT_STATE = ROBOT_STATE_MOVING_TO_BURN_OUT  
								updateResourceRep( getStatusString()  
								)
								request("extractash", "extractash($BURN_OUT_POS_X,$BURN_OUT_POS_Y)" ,"oprobot" )  
								forward("update_led_mode", "update_led_mode($LED_OFF)" ,"led" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="goHome", cond=doswitchGuarded({ INHOME == 0  
					}) )
					transition( edgeName="goto",targetState="printStatus", cond=doswitchGuarded({! ( INHOME == 0  
					) }) )
				}	 
				state("handleScaleRPStatus") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("update_scale_count(COUNT)"), Term.createTerm("update_scale_count(COUNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								      	RPCONT = payloadArg(0).toInt()
								CommUtils.outmagenta("$name - scale status changed, rp in storage = $RPCONT")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="check", cond=doswitchGuarded({ INHOME == 1  
					}) )
					transition( edgeName="goto",targetState="printStatus", cond=doswitchGuarded({! ( INHOME == 1  
					) }) )
				}	 
				state("handleAshMeasurement") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ash_measurement(L)"), Term.createTerm("ash_measurement(L)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								        var level = payloadArg(0).toInt()
								        ASHLEVEL = level
								CommUtils.outmagenta("$name - ash level changed, update")
								if(  (ASHLEVEL - ASH_STORAGE_THRESHOLD) <= 0  
								 ){forward("update_led_mode", "update_led_mode($LED_BLINK)" ,"led" ) 
								//val m = MsgUtil.buildEvent(name, "mqtt_info", "led_status_blink" ) 
								publish(MsgUtil.buildEvent(name,"mqtt_info","led_status_blink").toString(), "it.unib0.iss.waste-incinerator-service" )   
								}
								updateResourceRep( getStatusString()  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="check", cond=doswitchGuarded({ INHOME == 1  
					}) )
					transition( edgeName="goto",targetState="printStatus", cond=doswitchGuarded({! ( INHOME == 1  
					) }) )
				}	 
			}
		}
} 
